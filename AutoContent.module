<?php

/**
 * ProcessWire module for automatic generation of content when a field is blank
 * by Adrian Jones
 *
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class AutoContent extends WireData implements Module, ConfigurableModule {

    public static function getModuleInfo() {
        return array(
            'title' => 'Auto Content',
            'summary' => 'Automatic generation of content when a field is blank',
            'author' => 'Adrian Jones',
            'href' => '',
            'version' => 34,
            'autoload' => true,
            'icon' => 'lightbulb-o'
        );
    }

    /**
     * Data as used by the get/set functions
     *
     */
    protected $data = array();
    protected $faker;


   /**
     * Default configuration for module
     *
     */
    static public function getDefaultData() {
            return array(
                "locale" => ""
            );
    }

    /**
     * Populate the default config data
     *
     */
    public function __construct() {
       foreach(self::getDefaultData() as $key => $value) {
               $this->$key = $value;
       }

        // require the Faker autoloader
        require_once $this->config->paths->siteModules.'/AutoContent/vendor/autoload.php';

        // use the factory to create a Faker\Generator instance
        $this->faker = $this->data['locale'] ? Faker\Factory::create($this->data['locale']) : Faker\Factory::create();

    }

    public function init() {
        $this->addHookAfter('Inputfield::getConfigInputfields', $this, 'fieldConfig');
        $this->addHookAfter('Fieldtype::formatValue', $this, 'autoContent');
        if($this->input->get->name == "AutoContent") $this->addHookAfter('Modules::saveModuleConfigData', $this, 'createOrDeletePages');
    }


    public function autoContent($event) {
        $p = $event->arguments(0);
        //if($p->id != $this->page->id) return;
        if($p->template == "admin" || $p->parent->id == $this->config->adminRootPageID || $p->parent->id == $this->config->trashPageID) return;
        $field = $event->arguments("field");
        $value = $event->arguments("value");
        //if not empty then display available real content
        if(!is_object($event->return) && $event->return != '') return;
        if(is_object($event->return) && count($event->return) > 0) return;
        //if MapMarker set to default then exit
        if(isset($event->return->lat) && $event->return->lat != '0.000000') return;
        $event->return = $this->generateContent($p, $field, $value);
    }


    protected function generateContent($p, $field, $value, $noImages = false) {

        if($field->type instanceof FieldtypeText && $field->type != "FieldtypeURL" && $field->type != "FieldtypeDatetime" && $field->type != "FieldtypeTextarea") {
            //see if faker property has been set on the Input tab of the field settings
            if($field->faker_property) {
                return $this->faker->{$field->faker_property};
            }
            else {
                //see if faker has a property matched to the name of the text field
                try {
                    //convert field name which is likely in snakecase to lowerCamelCase which faker properties use
                    //eg. last_name is converted to lastName
                    $faker_property = $this->toLowerCamelCase($field->name);
                    return $this->faker->$faker_property;
                }
                catch (Exception $e) {
                    return "This is an example {$field->label}";
                }
            }
        }
        elseif($field->type == "FieldtypePage") {
            $error = false;
            //if no pages selected, create them via faker
            if(count($value) == 0) {
                //see if faker property has been set on the Input tab of the field settings
                if($field->faker_property) {
                    //see if faker has a property matched to the name of the text field
                    try {
                        $faker_property = $field->faker_property;
                        $test = $this->faker->$faker_property;
                    }
                    catch (Exception $e) {
                        $error = true;
                    }
                }
                else {
                    //see if faker has a property matched to the name of the text field
                    try {
                        //convert field name which is likely in snakecase to lowerCamelCase which faker properties use
                        //eg. last_name is converted to lastName
                        $faker_property = $this->toLowerCamelCase($field->name);
                        $test = $this->faker->$faker_property;
                    }
                    catch (Exception $e) {
                        $error = true;
                    }
                }
                $fakedPages = new PageArray();
                $numPages = $field->derefAsPage == 0 ? mt_rand(2,5) : 1;
                $inputfield = $field->getInputfield($p);
                $selectablePages = $inputfield->getSelectablePages($p);
                $availableTemplates = new wireArray();
                foreach($selectablePages as $sp) {
                    if($sp->template != "admin") $availableTemplates->add($sp->template);
                }

                // new fieldgroup with all possible fields from templates of selectable pages
                $fg = new Fieldgroup();
                $fg->name = 'master_template';
                $fg->add($this->fields->get('title')); // needed title field

                foreach($availableTemplates as $t) {
                    foreach($t->fields as $f) {
                        if(!$fg->hasField($f)) $fg->add($f);
                    }
                }

                // set up the master template with this new master fieldgroup of fields
                $masterTemplate = new Template();
                $masterTemplate->name = 'master_template';
                $masterTemplate->fieldgroup = $fg; // add the fieldgroup

                for($i=0;$i<$numPages;$i++) {
                    $np = new Page();
                    $np->template = $masterTemplate;
                    if($error) {
                        $np->title = str_replace('.','',$this->faker->sentence(mt_rand(1,3)));
                        foreach($masterTemplate->fields as $f) {
                            echo $f->name;
                            //if($f->type instanceof FieldtypeText) $np->{$f->name} = str_replace('.','',$this->faker->sentence(mt_rand(1,3)));
                            if(!$f->type instanceof FieldtypeImage) $np->{$f->name} = $this->generateContent($p, $f, '', true);
                        }
                    }
                    else {
                        $np->title = $this->faker->$faker_property;
                        foreach($masterTemplate->fields as $f) {
                            //if($f->type instanceof FieldtypeText) $np->{$f->name} = $this->faker->$faker_property;
                            if(!$f->type instanceof FieldtypeImage) $np->{$f->name} = $this->generateContent($p, $f, '', true);
                        }
                    }
                    $np->name = $this->sanitizer->pageName($np->title, true);

                    $fakedPages->add($np);
                }
                return $fakedPages;

            }
        }
        elseif($field->type == "FieldtypeDatetime") {
            //see if faker property has been set on the Input tab of the field settings
            if($field->faker_property) {
                if($field->faker_property == "dateTimeBetween") {
                    $fakedDate = $this->faker->{$field->faker_property}(date("Y-m-d g:i:s", $field->min_datetime), $field->max_datetime);
                }
                else {
                    $fakedDate = $this->faker->{$field->faker_property}($field->max_datetime);
                }
            }
            else {
                //see if faker has a property matched to the name of the text field
                try {
                    //convert field name which is likely in snakecase to lowerCamelCase which faker properties use
                    //eg. date_time is converted to dateTime
                    $faker_property = $this->toLowerCamelCase($field->name);
                    $fakedDate = $this->faker->$faker_property($field->max_datetime);
                }
                catch (Exception $e) {
                    $fakedDate = $this->faker->dateTime($field->max_datetime);
                }
            }

            (array) $fakedDate;
            $datetime = is_object($fakedDate) ? $fakedDate->date : $fakedDate;
            return $field->dateOutputFormat ? date($field->dateOutputFormat, (is_numeric($datetime) ? $datetime : strtotime($datetime))) : $datetime;
        }
        elseif($field->type == "FieldtypeInteger") {
            return mt_rand($field->min ? $field->min : 0, $field->max ? $field->max : getrandmax());
        }
        elseif($field->type == "FieldtypeFloat") {
            $scale = pow(10, $field->precision);
            return mt_rand(($field->min ? $field->min : 0) * $scale, ($field->max ? $field->max : getrandmax()) * $scale) / $scale;
        }
        elseif($field->type == "FieldtypeEmail") {
            return $field->faker_property ? $field->faker_property : $this->faker->email;
        }
        elseif($field->type == "FieldtypeURL") {
            return $field->faker_property ? $field->faker_property : $this->faker->url;
        }
        elseif($field->type == "FieldtypeTextarea") {
            //Plain text
            if($field->inputfieldClass == 'InputfieldTextarea') {
                return file_get_contents("http://loripsum.net/api/{$field->auto_content_number_paragraphs}/{$field->auto_content_length_paragraphs}/plaintext");
            }
            //RTEs
            else {
                $loremIpsum = file_get_contents("http://loripsum.net/api/{$field->auto_content_number_paragraphs}/{$field->auto_content_length_paragraphs}".
                                    ($field->auto_content_add_headers ? '/headers' : '').
                                    ($field->auto_content_decorate_paragraphs ? '/decorate' : '').
                                    ($field->auto_content_add_unordered_lists ? '/ul' : '').
                                    ($field->auto_content_add_ordered_lists ? '/ol' : '').
                                    ($field->auto_content_add_description_lists ? '/dl' : '').
                                    ($field->auto_content_add_blockquotes ? '/bq' : '').
                                    ($field->auto_content_add_code ? '/code' : '').
                                    ($field->auto_content_add_links ? '/link' : '')
                                );

                if($field->auto_content_add_images && !$noImages) {
                    //see if image field is available for this page's template
                    foreach($p->fields as $f) {
                        if($f->type instanceof FieldtypeImage && $f->maxFiles != 1) {
                            $imageField = $f;
                            break;
                        }
                    }

                    if($imageField) {
                        $text = str_replace('</p>', '', $loremIpsum);
                        $paragraphs = explode('<p>', $text);

                        $p->of(false);
                        $finalHtml = '';
                        $imageArray = array();
                        $maxNumImages = $imageField->max_num_of_images ? $imageField->max_num_of_images : 3;
                        for($i=0;$i<$maxNumImages;$i++) {
                            $imageArray[] = $i;
                        }
                        foreach($paragraphs as $paragraph) {
                            $randPosition = array_rand($field->auto_content_image_positions);
                            if($field->auto_content_image_positions[$randPosition] == 'left') {
                                $imageClass = 'class="align_left"';
                                $imageWidth = 'width="50%"';
                            }
                            elseif($field->auto_content_image_positions[$randPosition] == 'right') {
                                $imageClass = 'class="align_right"';
                                $imageWidth = 'width="50%"';
                            }
                            else {
                                $imageClass = '';
                                $imageWidth = 'width="100%"';
                            }
                            if(strlen($paragraph) > 100) {
                                $i = array_rand($imageArray);
                                unset($imageArray[$i]);
                                $imageUrl = wire('config')->urls->assets.'autocontent/'.$this->generateImage($p, $imageField, $i);
                                $finalHtml .= '<p><img ' . $imageWidth . ' '.$imageClass.' src="'.$imageUrl.'" /></p>' . $paragraph . '<p style="clear:both">';
                            }
                        }
                        $p->of(true);
                    }
                }
                else {
                    $finalHtml = $loremIpsum;
                }

                return $finalHtml;
            }
        }
        elseif($field->type instanceof FieldtypeImage) {
            $width = $field->minWidth ? $field->minWidth : ($field->maxWidth ? $field->maxWidth : 1000);
            $height = $field->minHeight ? $field->minHeight : ($field->maxHeight ? $field->maxHeight : 500);

            if($field->maxFiles == 1) {
                $this->generateImage($p, $field, 0);
                $imagePath = $p->filesManager()->path().'autocontent_'.$field->name.'_0.jpg';
                if(!file_exists($imagePath)) {
                    $imagePath = wire('config')->paths->assets.'autocontent/autocontent_'.$field->name.'_0.jpg';
                }
                $pageimages = $this->getBlankValue($p, $field);
                $this->fakerImage = new Pageimage($pageimages, $imagePath);
                return $this->fakerImage;
            }
            else {
                $pageimages = $this->getBlankValue($p, $field);
                // first create the max number of images allowed
                $maxNumImages = $field->max_num_of_images ? $field->max_num_of_images : 3;
                for($i=0;$i<$maxNumImages;$i++) {
                    $this->generateImage($p, $field, $i);
                }
                // now select a random number and set up this many pageimages
                $randNumImages = mt_rand($field->min_num_of_images ? $field->min_num_of_images : 1, $maxNumImages);
                for($i=0;$i<$randNumImages;$i++) {
                    $imagePath = $p->filesManager()->path().'autocontent_'.$field->name.'_'.$i.'.jpg';
                    if(!file_exists($imagePath)) {
                        $imagePath = wire('config')->paths->assets.'autocontent/autocontent_'.$field->name.'_'.$i.'.jpg';
                    }
                    $this->fakerImage = new Pageimage($pageimages, $imagePath);
                    $pageimages->add($this->fakerImage);
                }
                return $pageimages;
            }

        }
        elseif($field->type == "FieldtypeTable") {
            //not working yet
            /*$tableEntry = $p->{$field->name}->makeBlankItem();
            foreach($p->{$field->name}->columns as $f) {
                $subFieldName = $f['name'];
                $tableEntry->$subFieldName = $this->generateContent($p, $f, '');
            }
            $p->{$field->name}->add($tableEntry);
            return $table;*/
        }
        elseif($field->type == "FieldtypeMapMarker") {
            $map = new stdClass();
            $map->address = $this->faker->address;
            $map->lat = $this->faker->latitude;
            $map->lng = $this->faker->longitude;
            return $map;
        }
        else {
            return "This is an example {$field->label}";
        }
    }


    public function fieldConfig(HookEvent $event) {

        $field = wire('fields')->get($event->object->name);

        // get existing inputfields from getConfigInputfields
        $inputfields = $event->return;

        $fieldset = $this->modules->get("InputfieldFieldset");
        $fieldset->attr('id', 'autocontent_options');
        $fieldset->label = "AutoContent Options";
        $fieldset->description = "These options control the automatically generated content if the field is empty.";
        $fieldset->collapsed = Inputfield::collapsedYes;
        $inputfields->add($fieldset);


        if($field->type == "FieldtypeTextarea") {

            $f = $this->modules->get('InputfieldInteger');
            $f->label = __('Number of paragraphs');
            $f->description = __('The number of paragraphs generated.');
            $f->attr('name', 'auto_content_number_paragraphs');
            $f->columnWidth = 50;
            $auto_content_length_paragraphs = $this->fields->get($event->object->name)->auto_content_number_paragraphs;
            $f->value = $auto_content_length_paragraphs ? $auto_content_length_paragraphs : 3;
            $fieldset->append($f);

            $f = $this->modules->get('InputfieldSelect');
            $f->label = __('Length of paragraphs');
            $f->description = __('The length of the paragraphs.');
            $f->attr('name', 'auto_content_length_paragraphs');
            $f->columnWidth = 50;
            $f->addOption('short', 'Short');
            $f->addOption('medium', 'Medium');
            $f->addOption('long', 'Long');
            $f->addOption('verylong', 'Very Long');
            $auto_content_length_paragraphs = $this->fields->get($event->object->name)->auto_content_length_paragraphs;
            $f->value = $auto_content_length_paragraphs ? $auto_content_length_paragraphs : 'long';
            $fieldset->append($f);

            //html options if RTE textarea fields - CKEditor, TinyMCE etc
            if($this->fields->get($event->object->name)->inputfieldClass != 'InputfieldTextarea') {

                $f = $this->modules->get('InputfieldCheckbox');
                $f->label = __('Add Headers');
                $f->description = __('Inlude random headers (<h1>, <h2>, etc) headers throughout the text.');
                $f->columnWidth = 33;
                $f->attr('name', 'auto_content_add_headers');
                $f->attr('checked', $this->fields->get($event->object->name)->auto_content_add_headers == '1' ? 'checked' : '');
                $fieldset->append($f);

                $f = $this->modules->get('InputfieldCheckbox');
                $f->label = __('Decorate paragraphs');
                $f->description = __('Add bold, italic and marked text.');
                $f->columnWidth = 34;
                $f->attr('name', 'auto_content_decorate_paragraphs');
                $f->attr('checked', $this->fields->get($event->object->name)->auto_content_decorate_paragraphs == '1' ? 'checked' : '');
                $fieldset->append($f);

                $f = $this->modules->get('InputfieldCheckbox');
                $f->label = __('Add Links');
                $f->description = __('Include links (<a>) throughout the text.');
                $f->columnWidth = 33;
                $f->attr('name', 'auto_content_add_links');
                $f->attr('checked', $this->fields->get($event->object->name)->auto_content_add_links == '1' ? 'checked' : '');
                $fieldset->append($f);

                $f = $this->modules->get('InputfieldCheckbox');
                $f->label = __('Add Unordered Lists');
                $f->description = __('Include random unordered lists (<ul>) throughout the text.');
                $f->columnWidth = 20;
                $f->attr('name', 'auto_content_add_unordered_lists');
                $f->attr('checked', $this->fields->get($event->object->name)->auto_content_add_unordered_lists == '1' ? 'checked' : '');
                $fieldset->append($f);

                $f = $this->modules->get('InputfieldCheckbox');
                $f->label = __('Add Ordered Lists');
                $f->description = __('Include random ordered lists (<ol>) throughout the text.');
                $f->columnWidth = 20;
                $f->attr('name', 'auto_content_add_ordered_lists');
                $f->attr('checked', $this->fields->get($event->object->name)->auto_content_add_ordered_lists == '1' ? 'checked' : '');
                $fieldset->append($f);

                $f = $this->modules->get('InputfieldCheckbox');
                $f->label = __('Add Description Lists');
                $f->description = __('Include random description lists (<dl>) throughout the text.');
                $f->columnWidth = 20;
                $f->attr('name', 'auto_content_add_description_lists');
                $f->attr('checked', $this->fields->get($event->object->name)->auto_content_add_description_lists == '1' ? 'checked' : '');
                $fieldset->append($f);

                $f = $this->modules->get('InputfieldCheckbox');
                $f->label = __('Add Blockquotes');
                $f->description = __('Include blockquotes (<blockquote>) throughout the text.');
                $f->columnWidth = 20;
                $f->attr('name', 'auto_content_add_blockquotes');
                $f->attr('checked', $this->fields->get($event->object->name)->auto_content_add_blockquotes == '1' ? 'checked' : '');
                $fieldset->append($f);

                $f = $this->modules->get('InputfieldCheckbox');
                $f->label = __('Add Code Blocks');
                $f->description = __('Include code blocks (<pre>) throughout the text.');
                $f->columnWidth = 20;
                $f->attr('name', 'auto_content_add_code');
                $f->attr('checked', $this->fields->get($event->object->name)->auto_content_add_code == '1' ? 'checked' : '');
                $fieldset->append($f);

                $f = $this->modules->get('InputfieldCheckbox');
                $f->label = __('Add Images');
                $f->description = __('Include embedded images throughout the text.');
                $f->columnWidth = 50;
                $f->attr('name', 'auto_content_add_images');
                $f->attr('checked', $this->fields->get($event->object->name)->auto_content_add_images == '1' ? 'checked' : '');
                $fieldset->append($f);

                $f = $this->modules->get('InputfieldCheckboxes');
                $f->label = __('Image Positions');
                $f->showIf = "auto_content_add_images=1";
                $f->description = __('Positions images can be added throughout the text.');
                $f->columnWidth = 50;
                $f->attr('name', 'auto_content_image_positions');
                $f->addOption('left','Align Left');
                $f->addOption('right','Align Right');
                $f->addOption('fullWidth','Full Width');
                $f->value = $this->fields->get($event->object->name)->auto_content_image_positions;
                $fieldset->append($f);

            }
        }
        elseif($field->type instanceof FieldtypeImage){
            $f = $this->modules->get('InputfieldSelect');
            $f->label = __('Image content type');
            $f->attr('name', 'auto_image_content_type');
            $f->addOption('abstract', 'Abstract');
            $f->addOption('animals', 'Animals');
            $f->addOption('business', 'Business');
            $f->addOption('cats', 'Cats');
            $f->addOption('city', 'City');
            $f->addOption('fashion', 'Fashion');
            $f->addOption('food', 'Food');
            $f->addOption('nature', 'Nature');
            $f->addOption('nightlife', 'Nightlife');
            $f->addOption('people', 'People');
            $f->addOption('sports', 'Sports');
            $f->addOption('technics', 'Technics');
            $f->addOption('transport', 'Transport');
            $f->value = $this->fields->get($event->object->name)->auto_image_content_type;
            $fieldset->append($f);

            if($this->fields->get($event->object->name)->maxFiles != 1) {
                $f = wire('modules')->get('InputfieldInteger');
                $f->label = __('Min number of images');
                $f->description = __('The minimum number of images to generate.');
                $f->notes = __('If empty, the default of 1 will be used.');
                $f->columnWidth = 50;
                $f->attr('name', 'min_num_of_images');
                $f->value = $this->fields->get($event->object->name)->min_num_of_images;
                $fieldset->append($f);

                $f = wire('modules')->get('InputfieldInteger');
                $f->label = __('Max number of images');
                $f->description = __('The maximum number of images to generate. Too many will result in a slow first load of each page. Images are stored locally so subsequent loads will be fast.');
                $f->notes = __('If empty, the default of 3 will be used.');
                $f->columnWidth = 50;
                $f->attr('name', 'max_num_of_images');
                $f->value = $this->fields->get($event->object->name)->max_num_of_images;
                $fieldset->append($f);
            }

            /*
            $f = $this->modules->get('InputfieldSelect');
            $f->label = __('Image color');
            $f->columnWidth = 50;
            $f->attr('name', 'auto_image_color');
            $f->addOption('', 'Color');
            $f->addOption('g', 'Greyscale (B&W)');
            $f->value = $this->fields->get($event->object->name)->auto_image_color;
            $fieldset->append($f);
            */

        }
        elseif($field->type == 'FieldtypeURL') {
            $f = $this->modules->get('InputfieldText');
            $f->label = __('Faker property');
            $f->description = __('The Faker property you want to use to auto populate content. You can use anything from the list of formatters at: [https://github.com/fzaninotto/Faker#formatters](https://github.com/fzaninotto/Faker#formatters)');
            $f->notes = __('This will automatically use the "url" Faker property so you can leave it empty.');
            $f->attr('name', 'faker_property');
            $f->value = $field->faker_property;
            $fieldset->append($f);
        }
        else {
            $f = $this->modules->get('InputfieldText');
            $f->label = __('Faker property');
            $f->description = __('The Faker property you want to use to auto populate content. You can use anything from the list of formatters at: [https://github.com/fzaninotto/Faker#formatters](https://github.com/fzaninotto/Faker#formatters)');
            $autoFakerProperty = $this->toLowerCamelCase($field->name);

            try {
                $faker_property = $this->toLowerCamelCase($field->name);
                $this->faker->$faker_property;
                $f->notes = __("This field has been automatically matched to the \"$faker_property\" Faker property so you can leave it empty.");
            }
            catch (Exception $e) {
                $f->notes = __("There is no Faker property that matches the name of this field, so you will need to enter one manually.");
            }

            $f->attr('name', 'faker_property');
            $f->value = $field->faker_property;
            $fieldset->append($f);
        }


        //Additional config settings
        if($field->type == "FieldtypeDatetime") {

            $f = wire('modules')->get('InputfieldDatetime');
            $f->label = __('Minimum datetime');
            $f->columnWidth = 50;
            $f->datepicker = InputfieldDatetime::datepickerFocus;
            if($field->timeInputFormat) {
                $f->attr('dateInputFormat', "Y-m-d");
                $f->attr('timeInputFormat', "H:i:s");
            }
            $f->description = __('The earliest datetime to generate. For this to work, you need to change the Faker property to "dateTimeBetween".');
            $f->notes = __('If empty, the current datetime will be used. If you changed the "Time Input Format" above to or from "None", you will need to save before seeing this change appropriately.');
            $f->attr('name', 'min_datetime');
            $f->value = $this->fields->get($event->object->name)->min_datetime;
            $fieldset->append($f);

            $f = wire('modules')->get('InputfieldDatetime');
            $f->label = __('Maximum datetime');
            $f->columnWidth = 50;
            $f->datepicker = InputfieldDatetime::datepickerFocus;
            if($field->timeInputFormat) {
                $f->attr('dateInputFormat', "Y-m-d");
                $f->attr('timeInputFormat', "H:i:s");
            }
            $f->description = __('The latest datetime to generate.');
            $f->notes = __('If empty, the current datetime will be used. If you changed the "Time Input Format" above to or from "None", you will need to save before seeing this change appropriately.');
            $f->attr('name', 'max_datetime');
            $f->value = $this->fields->get($event->object->name)->max_datetime;
            $fieldset->append($f);
        }

    }


    protected function createOrDeletePages(HookEvent $event) {

        if($this->input->post->settingsSaved == 1) {

            //delete existing generated pages
            if($this->input->post->delete_generated_pages) {
                $this->deletePages($this->data['generatedPages']);
                unset($this->data['generatedPages']);
            }

            //add new generated pages
            if($this->input->post->number_of_pages) {
                for($i=0;$i<$this->input->post->number_of_pages;$i++) {
                    $np = new Page();
                    $np->parent = $this->input->post->parent_page;
                    $np->template = $this->input->post->page_template;
                    $np->title = $this->input->post->faker_property ? $this->faker->{$this->input->post->faker_property} : str_replace('.','',$this->faker->sentence(mt_rand(1,3)));
                    $np->addStatus(Page::statusLocked);
                    $np->save();
                    $this->data['generatedPages'][] = $np->id;
                }
            }
            $this->input->post->settingsSaved = null;
            $this->modules->saveModuleConfigData($this->modules->get("AutoContent"), $this->data);
        }

    }


    /**
     * Return an InputfieldsWrapper of Inputfields used to configure the class
     *
     * @param array $data Array of config values indexed by field name
     * @return InputfieldsWrapper
     *
     */
    public static function getModuleConfigInputfields(array $data) {

        $data = array_merge(self::getDefaultData(), $data);

        $wrapper = new InputfieldWrapper();

        $f = wire('modules')->get('InputfieldSelect');
        $f->attr('name+id', 'locale');
        $f->label = __('Locale');
        $f->description = __("This will determine the language and formatting of various generated content.");
        // populate with all available options from Faker Provider directory
        $path = wire('config')->paths->siteModules.'/AutoContent/vendor/fzaninotto/faker/src/Faker/Provider';
        foreach (new DirectoryIterator($path) as $file) {
            if ($file->isDot()) continue;

            if ($file->isDir()) {
                $f->addOption($file->getFilename());
            }
        }
        if(isset($data['locale'])) $f->value = $data['locale'];
        $wrapper->add($f);


        $fieldset = wire('modules')->get("InputfieldFieldset");
        $fieldset->attr('id', 'page_generator');
        $fieldset->label = "Page Generator";
        $fieldset->description = __("Automatically create pages for testing that can be automatically removed. Pages will be added when you click the Submit button. Generated pages are given locked status to prevent editing. If you remove this status, the pages will not be deleted during batch deletion.");
        $fieldset->collapsed = Inputfield::collapsedYes;
        $wrapper->add($fieldset);

        $f = wire('modules')->get('InputfieldHidden');
        $f->attr('name', 'settingsSaved');
        $f->value = 1;
        $wrapper->append($f);

        $f = wire('modules')->get('InputfieldInteger');
        $f->label = __('Number of pages');
        $f->description = __('The number of pages to generate.');
        $f->attr('name', 'number_of_pages');
        $fieldset->append($f);

        $f = wire('modules')->get('InputfieldPageListSelect');
        $f->label = __('Parent Page');
        $f->required = true;
        $f->requiredIf = "number_of_pages!=''";
        $f->description = __('The parent of pages that will be generated.');
        $f->attr('name', 'parent_page');
        $fieldset->append($f);

        $f = wire('modules')->get('InputfieldSelect');
        $f->label = __('Page Template');
        $f->required = true;
        $f->requiredIf = "number_of_pages!=''";
        $f->description = __('The template for the pages that will be generated.');
        $f->attr('name', 'page_template');
        foreach(wire('templates') as $t) {
            $f->addOption($t->id, $t->label ? $t->label : $t->name);
        }
        $fieldset->append($f);

        $f = wire('modules')->get('InputfieldText');
        $f->label = __('Faker property');
        $f->description = __('The Faker property you want to use to auto populate page titles. You can use anything from the list of formatters at: [https://github.com/fzaninotto/Faker#formatters](https://github.com/fzaninotto/Faker#formatters)');
        $f->notes = __('If left blank, it will use sentence(mt_rand(1,3)');
        $f->attr('name', 'faker_property');
        $fieldset->append($f);

        $f = wire('modules')->get('InputfieldCheckbox');
        $f->label = __('Delete Generated Pages');
        $f->description = __('Delete all the automatically generated pages, that still have their locked status.');
        $f->attr('name', 'delete_generated_pages');
        $f->collapsed = Inputfield::collapsedYes;
        $wrapper->append($f);

        return $wrapper;
    }


    /**
    * Helper functions
    */

    protected function generateImage ($p, $field, $i) {

        if(!file_exists(wire('config')->paths->assets.'autocontent/')){
            wireMkdir(wire('config')->paths->assets.'autocontent/');
        }

        $width = $field->minWidth ? $field->minWidth : ($field->maxWidth ? $field->maxWidth : 1000);
        $height = $field->minHeight ? $field->minHeight : ($field->maxHeight ? $field->maxHeight : 500);

        $imageFilename = 'autocontent_'.$field->name.'_'.$i.'.jpg';
        $imagePath = wire('config')->paths->assets.'autocontent/'.$imageFilename;

        if(!file_exists($p->filesManager->path().$imageFilename) && !file_exists($imagePath)) {
            $this->fakerImagePath = $this->faker->image(wire('config')->paths->assets.'autocontent/', $width, $height, $field->auto_image_content_type);
            rename($this->fakerImagePath, $imagePath);
        }

        return $imageFilename;
    }

    protected function toLowerCamelCase ($text) {
        return lcfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $text))));
    }

    protected function deletePages ($pidArray) {
        foreach($pidArray as $pid) {
            $p = wire('pages')->get($pid);
            if($p->hasStatus(Page::statusLocked)) {
                wire('pages')->delete($p, true);
            }
        }
    }

    protected function getBlankValue(Page $p, Field $field) {
        $pageimages = new Pageimages($p);
        $pageimages->setField($field);
        $pageimages->setTrackChanges(true);
        return $pageimages;
    }

    /**
     * Function to recursively delete an entire folder
     *
     */
    protected function recursiveDelete($dirPath, $deleteParent = true){
        foreach(new RecursiveIteratorIterator(new RecursiveDirectoryIterator($dirPath, FilesystemIterator::SKIP_DOTS), RecursiveIteratorIterator::CHILD_FIRST) as $path) {
            $path->isFile() ? unlink($path->getPathname()) : rmdir($path->getPathname());
        }
        if($deleteParent) rmdir($dirPath);
    }

    /**
     * Called only when your module is uninstalled
     *
     */
    public function ___uninstall() {
        // delete all automatically generated pages and temporary images
        if(isset($this->data['generatedPages'])) $this->deletePages($this->data['generatedPages']);

        // delete any temporary faker images
        ini_set('max_execution_time', 60*5); // 5 minutes, increase as needed

        // main image source folders assets/autocontent/
        if (file_exists(wire('config')->paths->assets.'autocontent/')) {
            $this->recursiveDelete(wire('config')->paths->assets.'autocontent/', true);
        }

        // "autocontent_n.jpg" images from each of the assets/files/page_id folders
        $dir = new DirectoryIterator(wire('config')->paths->files);

        foreach($dir as $file) {
            if($file->isDot() || !$file->isDir()) continue;
            $id = $file->getFilename();
            if(!ctype_digit("$id")) continue;
            $p = wire('pages')->get((int) $id);
            if(!$p->id) {
                continue;
            }

            // now find all the files present on the page
            // identify those that are not part of our $valid array
            $d = new DirectoryIterator($p->filesManager->path());
            foreach($d as $f) {
                if($f->isDot() || !$f->isFile()) continue;
                if (strpos($f,'autocontent_') !== false) {
                    unlink($p->filesManager->path().$f);
                }
            }
            wire('pages')->uncache($p); // just in case we need the memory

        }
    }

}
