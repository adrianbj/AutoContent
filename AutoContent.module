<?php

/**
 * ProcessWire module for automatic generation of content when a field is blank
 * by Adrian Jones
 *
 *
 * ProcessWire 2.x
 * Copyright (C) 2011 by Ryan Cramer
 * Licensed under GNU/GPL v2, see LICENSE.TXT
 *
 * http://www.processwire.com
 * http://www.ryancramer.com
 *
 */

class AutoContent extends WireData implements Module, ConfigurableModule {

    public static function getModuleInfo() {
        return array(
            'title' => 'Auto Content',
            'summary' => 'Automatic generation of content when a field is blank',
            'href' => '',
            'version' => 7,
            'autoload' => true,
            'icon'     => 'lightbulb-o'
        );
    }

    /**
     * Data as used by the get/set functions
     *
     */
    protected $data = array();


   /**
     * Default configuration for module
     *
     */
    static public function getDefaultData() {
            return array(
                "locale" => ""
            );
    }

    /**
     * Populate the default config data
     *
     */
    public function __construct() {
       foreach(self::getDefaultData() as $key => $value) {
               $this->$key = $value;
       }
    }


    public function init() {
        $this->addHookAfter('InputfieldText::getConfigInputfields', $this, 'textConfig');
        $this->addHookAfter('InputfieldTextarea::getConfigInputfields', $this, 'textareaConfig');
        $this->addHookAfter('Fieldtype::formatValue', $this, 'autoContent');
        if($this->input->get->name == "AutoContent") $this->addHookAfter('Modules::saveModuleConfigData', $this, 'createOrDeletePages');
    }


    public function createOrDeletePages(HookEvent $event) {

        if($this->input->post->settingsSaved == 1) {

            //delete existing generated pages
            if($this->input->post->delete_generated_pages) {
                $this->deletePages($this->data['generatedPages']);
                unset($this->data['generatedPages']);
            }

            //add new generated pages
            if($this->input->post->number_of_pages) {
                // require the Faker autoloader
                require_once $this->config->paths->siteModules.'/AutoContent/vendor/autoload.php';

                // use the factory to create a Faker\Generator instance
                $faker = $this->data['locale'] ? Faker\Factory::create($this->data['locale']) : Faker\Factory::create();

                for($i=0;$i<$this->input->post->number_of_pages;$i++) {
                    $np = new Page();
                    $np->parent = $this->input->post->parent_page;
                    $np->template = $this->input->post->page_template;
                    $np->title = str_replace('.','',$faker->sentence(mt_rand(1,3)));
                    $np->addStatus(Page::statusLocked);
                    $np->save();
                    $this->data['generatedPages'][] = $np->id;
                }
            }
            $this->input->post->settingsSaved = null;
            $this->modules->saveModuleConfigData($this->modules->get("AutoContent"), $this->data);
        }

    }

    public function autoContent($event) {

        $page = $event->arguments(0);
        if($page->template == 'admin') return;
        $field = $event->arguments(1);

        if(!is_object($event->return) && $event->return != '') return;

        // require the Faker autoloader
        require_once $this->config->paths->siteModules.'/AutoContent/vendor/autoload.php';

        // use the factory to create a Faker\Generator instance
        $faker = $this->data['locale'] ? Faker\Factory::create($this->data['locale']) : Faker\Factory::create();

        //if MapMarker set to default then exit
        if(isset($event->return->lat) && $event->return->lat != '0.000000') return;

        if($field->type == "FieldtypeText") {
            //see if faker property has been set on the Input tab of the field settings
            if($field->faker_property) {
                $event->return = $faker->{$field->faker_property};
            }
            else {
                //see if faker has a property matched to the name of the text field
                try {
                    //convert field name which is likely in snakecase to lowerCamelCase which faker properties use
                    //eg. last_name is converted to lastName
                    $faker_propery = $this->toLowerCamelCase($field->name);
                    $event->return = $faker->$faker_propery;
                }
                catch (Exception $e) {
                    $event->return = "This is an example {$field->label}";
                }
            }
        }
        elseif($field->type == "FieldtypeDatetime") {
            $event->return = $field->dateOutputFormat ? date($field->dateOutputFormat,time()) : time();
        }
        elseif($field->type == "FieldtypeInteger") {
            $event->return = mt_rand($field->min ? $field->min : 0, $field->max ? $field->max : getrandmax());
        }
        elseif($field->type == "FieldtypeFloat") {
            $scale = pow(10, $field->precision);
            $event->return = mt_rand(($field->min ? $field->min : 0) * $scale, ($field->max ? $field->max : getrandmax()) * $scale) / $scale;
        }
        elseif($field->type == "FieldtypeEmail") {
            $event->return = "info@".wire('config')->httpHost;
        }
        elseif($field->type == "FieldtypeURL") {
            $event->return = "http://".wire('config')->httpHost;
        }
        elseif($field->type == "FieldtypeTextarea") {
            //Plain text
            if($field->inputfieldClass == 'InputfieldTextarea') {
                $event->return = file_get_contents("http://loripsum.net/api/{$field->auto_content_number_paragraphs}/{$field->auto_content_length_paragraphs}/plaintext");
            }
            //RTEs
            else {
                $event->return = file_get_contents("http://loripsum.net/api/{$field->auto_content_number_paragraphs}/{$field->auto_content_length_paragraphs}".
                                    ($field->auto_content_add_headers ? '/headers' : '').
                                    ($field->auto_content_decorate_paragraphs ? '/decorate' : '').
                                    ($field->auto_content_add_unordered_lists ? '/ul' : '').
                                    ($field->auto_content_add_ordered_lists ? '/ol' : '').
                                    ($field->auto_content_add_description_lists ? '/dl' : '').
                                    ($field->auto_content_add_blockquotes ? '/bq' : '').
                                    ($field->auto_content_add_code ? '/code' : '').
                                    ($field->auto_content_add_links ? '/link' : '')
                                );
            }
        }
        elseif($field->type instanceof FieldtypeImage) {
            $width = $field->minWidth ? $field->minWidth : ($field->maxWidth ? $field->maxWidth : 1000);
            $height = $field->minHeight ? $field->minHeight : ($field->maxHeight ? $field->maxHeight : 500);
            $event->return = "http://placehold.it/{$width}x{$height}";
        }
        elseif($field->type == "FieldtypeMapMarker") {
            $map = new stdClass();
            $map->address = $faker->address;
            $map->lat = $faker->latitude;
            $map->lng = $faker->longitude;
            $event->return = $map;
        }
        else {
            $event->return = "This is an example {$field->label}";
        }
    }

    protected function toLowerCamelCase ($text) {
        return lcfirst(str_replace(' ', '', ucwords(str_replace('_', ' ', $text))));
    }

    protected function deletePages ($pidArray) {
        foreach($pidArray as $pid) {
            $p = wire('pages')->get($pid);
            if($p->hasStatus(Page::statusLocked)) {
                wire('pages')->delete($p, true);
            }
        }
    }

    public function textareaConfig(HookEvent $event) {

        // get existing inputfields from getConfigInputfields
        $inputfields = $event->return;

        $fieldset = $this->modules->get("InputfieldFieldset");
        $fieldset->attr('id', 'autocontent_options');
        $fieldset->label = "AutoContent Options";
        $fieldset->description = "These options control the automatically generated lorem ipsum text if the field is empty.";
        $fieldset->collapsed = Inputfield::collapsedYes;
        $inputfields->add($fieldset);

        $f = $this->modules->get('InputfieldInteger');
        $f->label = __('Number of paragraphs');
        $f->description = __('The number of paragraphs generated.');
        $f->attr('name', 'auto_content_number_paragraphs');
        $f->columnWidth = 50;
        $auto_content_length_paragraphs = $this->fields->get($event->object->name)->auto_content_number_paragraphs;
        $f->value = $auto_content_length_paragraphs ? $auto_content_length_paragraphs : 3;
        $fieldset->append($f);

        $f = $this->modules->get('InputfieldSelect');
        $f->label = __('Length of paragraphs');
        $f->description = __('The length of the paragraphs.');
        $f->attr('name', 'auto_content_length_paragraphs');
        $f->columnWidth = 50;
        $f->addOption('short', 'Short');
        $f->addOption('medium', 'Medium');
        $f->addOption('long', 'Long');
        $f->addOption('verylong', 'Very Long');
        $auto_content_length_paragraphs = $this->fields->get($event->object->name)->auto_content_length_paragraphs;
        $f->value = $auto_content_length_paragraphs ? $auto_content_length_paragraphs : 'medium';
        $fieldset->append($f);

        //html options if RTE textarea fields - CKEditor, TinyMCE etc
        if($this->fields->get($event->object->name)->inputfieldClass != 'InputfieldTextarea') {

            $f = $this->modules->get('InputfieldCheckbox');
            $f->label = __('Add Headers');
            $f->description = __('Inlude random headers (<h1>, <h2>, etc) headers throughout the text.');
            $f->columnWidth = 33;
            $f->attr('name', 'auto_content_add_headers');
            $f->attr('checked', $this->fields->get($event->object->name)->auto_content_add_headers == '1' ? 'checked' : '');
            $fieldset->append($f);

            $f = $this->modules->get('InputfieldCheckbox');
            $f->label = __('Decorate paragraphs');
            $f->description = __('Add bold, italic and marked text.');
            $f->columnWidth = 34;
            $f->attr('name', 'auto_content_decorate_paragraphs');
            $f->attr('checked', $this->fields->get($event->object->name)->auto_content_decorate_paragraphs == '1' ? 'checked' : '');
            $fieldset->append($f);

            $f = $this->modules->get('InputfieldCheckbox');
            $f->label = __('Add Links');
            $f->description = __('Include links (<a>) throughout the text.');
            $f->columnWidth = 33;
            $f->attr('name', 'auto_content_add_links');
            $f->attr('checked', $this->fields->get($event->object->name)->auto_content_add_links == '1' ? 'checked' : '');
            $fieldset->append($f);

            $f = $this->modules->get('InputfieldCheckbox');
            $f->label = __('Add Unordered Lists');
            $f->description = __('Include random unordered lists (<ul>) throughout the text.');
            $f->columnWidth = 20;
            $f->attr('name', 'auto_content_add_unordered_lists');
            $f->attr('checked', $this->fields->get($event->object->name)->auto_content_add_unordered_lists == '1' ? 'checked' : '');
            $fieldset->append($f);

            $f = $this->modules->get('InputfieldCheckbox');
            $f->label = __('Add Ordered Lists');
            $f->description = __('Include random ordered lists (<ol>) throughout the text.');
            $f->columnWidth = 20;
            $f->attr('name', 'auto_content_add_ordered_lists');
            $f->attr('checked', $this->fields->get($event->object->name)->auto_content_add_ordered_lists == '1' ? 'checked' : '');
            $fieldset->append($f);

            $f = $this->modules->get('InputfieldCheckbox');
            $f->label = __('Add Description Lists');
            $f->description = __('Include random description lists (<dl>) throughout the text.');
            $f->columnWidth = 20;
            $f->attr('name', 'auto_content_add_description_lists');
            $f->attr('checked', $this->fields->get($event->object->name)->auto_content_add_description_lists == '1' ? 'checked' : '');
            $fieldset->append($f);

            $f = $this->modules->get('InputfieldCheckbox');
            $f->label = __('Add Blockquotes');
            $f->description = __('Include blockquotes (<blockquote>) throughout the text.');
            $f->columnWidth = 20;
            $f->attr('name', 'auto_content_add_blockquotes');
            $f->attr('checked', $this->fields->get($event->object->name)->auto_content_add_blockquotes == '1' ? 'checked' : '');
            $fieldset->append($f);

            $f = $this->modules->get('InputfieldCheckbox');
            $f->label = __('Add Code Blocks');
            $f->description = __('Include code blocks (<pre>) throughout the text.');
            $f->columnWidth = 20;
            $f->attr('name', 'auto_content_add_code');
            $f->attr('checked', $this->fields->get($event->object->name)->auto_content_add_code == '1' ? 'checked' : '');
            $fieldset->append($f);

        }

    }

    public function textConfig(HookEvent $event) {

        // require the Faker autoloader
        require_once $this->config->paths->siteModules.'/AutoContent/vendor/autoload.php';

        // use the factory to create a Faker\Generator instance
        $faker = $this->data['locale'] ? Faker\Factory::create($this->data['locale']) : Faker\Factory::create();

        // get existing inputfields from getConfigInputfields
        $inputfields = $event->return;

        $fieldset = $this->modules->get("InputfieldFieldset");
        $fieldset->attr('id', 'autocontent_options');
        $fieldset->label = "AutoContent Options";
        $fieldset->description = "These options control the automatically generated content if the field is empty.";
        $fieldset->collapsed = Inputfield::collapsedYes;
        $inputfields->add($fieldset);

        $f = $this->modules->get('InputfieldText');
        $f->label = __('Faker property');
        $f->description = __('The Faker property you want to use to auto populate content. You can use anything from the list of formatters at: [https://github.com/fzaninotto/Faker#formatters](https://github.com/fzaninotto/Faker#formatters)');
        $autoFakerProperty = $this->toLowerCamelCase($event->object->name);

        try {
            $faker_propery = $this->toLowerCamelCase($event->object->name);
            $faker->$faker_propery;
            $f->notes = __("This field has been automatically matched to the \"$faker_propery\" Faker property so you can leave it empty.");
        }
        catch (Exception $e) {
            $f->notes = __("There is no Faker property that matches the name of this field, so you will need to enter one manually.");
        }

        $f->attr('name', 'faker_property');
        $f->value = $this->fields->get($event->object->name)->faker_property;
        $fieldset->append($f);

    }


    /**
     * Return an InputfieldsWrapper of Inputfields used to configure the class
     *
     * @param array $data Array of config values indexed by field name
     * @return InputfieldsWrapper
     *
     */
    public static function getModuleConfigInputfields(array $data) {

        $data = array_merge(self::getDefaultData(), $data);

        $wrapper = new InputFieldWrapper();

        $f = wire('modules')->get('InputfieldSelect');
        $f->attr('name+id', 'locale');
        $f->label = __('Locale');
        $f->description = __("The selected roles will not be subject to any of the rules below.\nThe name will change automatically with the title, but they will be able to manually edit the page name as desired.");
        // populate with all available options from Faker Provider directory
        $path = wire('config')->paths->siteModules.'/AutoContent/vendor/fzaninotto/faker/src/Faker/Provider';
        foreach (new DirectoryIterator($path) as $file) {
            if ($file->isDot()) continue;

            if ($file->isDir()) {
                $f->addOption($file->getFilename());
            }
        }
        if(isset($data['locale'])) $f->value = $data['locale'];
        $wrapper->add($f);


        $fieldset = wire('modules')->get("InputfieldFieldset");
        $fieldset->attr('id', 'page_generator');
        $fieldset->label = "Page Generator";
        $fieldset->description = __("Automatically create pages for testing that can be automatically removed. Pages will be added when you click the Submit button. Generated pages are given locked status to prevent editing. If you remove this status, the pages will not be deleted during batch deletion.");
        $fieldset->collapsed = Inputfield::collapsedYes;
        $wrapper->add($fieldset);

        $f = wire('modules')->get('InputfieldHidden');
        $f->attr('name', 'settingsSaved');
        $f->value = 1;
        $wrapper->append($f);

        $f = wire('modules')->get('InputfieldInteger');
        $f->label = __('Number of pages');
        $f->description = __('The number of pages to generate.');
        $f->attr('name', 'number_of_pages');
        $fieldset->append($f);

        $f = wire('modules')->get('InputfieldPageListSelect');
        $f->label = __('Parent Page');
        //$f->showIf = "number_of_pages!=''";
        $f->required = true;
        $f->requiredIf = "number_of_pages!=''";
        $f->description = __('The parent of pages that will be generated.');
        $f->attr('name', 'parent_page');
        $fieldset->append($f);

        $f = wire('modules')->get('InputfieldSelect');
        $f->label = __('Page Template');
        //$f->showIf = "number_of_pages!=''";
        $f->required = true;
        $f->requiredIf = "number_of_pages!=''";
        $f->description = __('The template for the pages that will be generated.');
        $f->attr('name', 'page_template');
        foreach(wire('templates') as $t) {
            $f->addOption($t->id, $t->label ? $t->label : $t->name);
        }
        $fieldset->append($f);

        $f = wire('modules')->get('InputfieldCheckbox');
        $f->label = __('Delete Generated Pages');
        $f->description = __('Delete all the automatically generated pages, that still have their locked status.');
        $f->attr('name', 'delete_generated_pages');
        $f->collapsed = Inputfield::collapsedYes;
        $wrapper->append($f);

        return $wrapper;
    }

    /**
     * Called only when your module is uninstalled
     *
     * Delete all automatically generated pages
     *
     */
    public function ___uninstall() {
        $this->deletePages($this->data['generatedPages']);
    }

}
